import React, { useState, useEffect } from "react";
import Head from 'next/head'
import { Container } from 'react-bootstrap'
import Sidebar from '../components/Sidebar'
import DashBoardHeader from '../components/DashBoardHeader'
import styles from '../styles/dashboard.module.scss'
import axios from "axios";
import SystemTime from "../components/SystemTime";
import ScheduleRequests from "../components/ScheduleRequests";
import ScheduleTimeline from "../components/schedule/ScheduleTimeline"
import ScheduleTableView from "@/components/schedule/ScheduleTableView";
import { Box, Tab, Tabs, Select, InputLabel, MenuItem, FormControl } from "@mui/material";

export async function getStaticProps() {
  let base_url = process.env.NEXT_PUBLIC_BASE_API_URL
  const response = await axios.get(`${base_url}/schedules/`)
  const data = response.data.reduce((acc, schedule_json) => {
    acc[schedule_json['name']] = schedule_json
    return acc
  }, {})
  return {
    props: {
      schedules: data,
    }
  }
}

let displayed_event_types = ["imaging", "maintenance", "gs_outage", "sat_outage"]

export default function ScheduleView({schedules}) {
  const defaultScheduleName = "Default Schedule"
  const [tab, setTab] = useState(0);
  const [currentScheduleName, setCurrentScheduleName] = useState(defaultScheduleName)
  const [scheduledEvents, setScheduledEvents] = useState([])

  const updateScheduledEvents = async (currentScheduleName, scheduleInfos) => {
    try {
      let event_types_filter = ""
      if (displayed_event_types.length > 0) {
        event_types_filter = '?event_types=' + displayed_event_types.join('&event_types=')
      }
      
      let base_url = process.env.NEXT_PUBLIC_BASE_API_URL
      let url = `${base_url}/schedules/${scheduleInfos[currentScheduleName]?.id}/events${event_types_filter}`
      const response = await axios.get(url)
      setScheduledEvents(response.data)
    } catch (error) {
      setScheduledEvents([])
      throw error;
    }
  }

  useEffect(() => {
    updateScheduledEvents(currentScheduleName, schedules)
  }, [currentScheduleName])

  const [timeConstraint, setTimeConstraint] = useState(1);
  
  return (
    <>
      <Head>
        <title>dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className='dashboard'>
        <Sidebar/>
        <DashBoardHeader />
        <div className="dashboardContent">
          <div className={styles.dashboardMainContent}>
            <Container className={styles.container}>
              <FormControl>
                <InputLabel id="schedule-select-label">Schedule</InputLabel>
                <Select
                  labelId="schedule-select-label"
                  id="schedule-select"
                  defaultValue={defaultScheduleName}
                  label="Schedule"
                  onChange={(event) => setCurrentScheduleName(event.target.value)}
                >
                  {Object.keys(schedules).map((schedule_name, idx) => (
                    <MenuItem key={idx} value={schedule_name.trim()}>{schedule_name}</MenuItem>
                  ))}
                </Select>
              </FormControl>
              <FormControl>
                <InputLabel id="time-constraint-label">Time Constraint</InputLabel>
                <Select
                  labelId="time-constraint-label"
                  id="time-constraint-select"
                  value={timeConstraint}
                  label="Time Constraint"
                  onChange={(event) => setTimeConstraint(event.target.value)}
                >
                  {[...Array(60).keys()].map((value) => (
                    <MenuItem key={value} value={value + 1}>{value + 1} minute(s)</MenuItem>
                  ))}
                </Select>
              </FormControl>
              <Box sx={{ width: "100%", marginBottom: "15px" }}>
                <Box sx={{ borderBottom: 1, borderColor: "divider" }}>
                  <Tabs value={tab} onChange={(_, value) => setTab(value)} aria-label="Tabs">
                    <Tab label="Table View" />
                    <Tab label="Timeline View" />
                    <Tab label="SYSTEM TIME" />
                    <Tab label="SCHEDULE REQUESTS" />
                  </Tabs>
                </Box>
              </Box>
              <Box sx={{ width: "100%", marginBottom: "15px" }}>
                {tab === 0 && <ScheduleTableView events={scheduledEvents}/>} 
                {tab === 1 && <ScheduleTimeline events={scheduledEvents}/>}
                {tab == 2 && <SystemTime />} 
                {tab == 3 && <ScheduleRequests/>}
              </Box>
            </Container>
          </div>
        </div>
      </main>
    </>
  );
}